<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow title="Recording tool" xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
	creationComplete="hideRecording()" width="360" height="220"
	>
	<mx:HBox width="100%">
		<mx:HBox width="100%" horizontalAlign="left">
			<mx:LinkButton id="bShowAdobeRecording" label="Show Adobe Recording" click="showAdobeRecording()" visible="false"/>
			<mx:LinkButton id="bShowFunFXRecording" label="Show FunFX Recording" click="showFunFXRecording()" visible="true"/>
		</mx:HBox>
		
		<mx:HBox width="100%" horizontalAlign="right">
			<mx:LinkButton id="showButton" label="Show" click="showRecording()" visible="true"/>
			<mx:LinkButton id="hideButton" label="Hide" click="hideRecording()" visible="false"/>
		</mx:HBox>
	</mx:HBox>
	
	<mx:TextArea id="outputFunFX" width="100%" height="100%" visible="{!bShowFunFXRecording.visible}" includeInLayout="{!bShowFunFXRecording.visible}"/>
	<mx:TextArea id="outputAdobe" width="100%" height="100%" visible="{!bShowAdobeRecording.visible}" includeInLayout="{!bShowAdobeRecording.visible}"/>
	
	<mx:HBox visible="{hideButton.visible}">
		<mx:Button label="Record" click="startRecording()" id="btnRecord" />
		<mx:Button label="Stop"  mouseDown="stopRecording()" id="btnStop" enabled="false"/>
		<mx:Button label="Play" click="startReplay()" id="btnReplay"/>
	</mx:HBox>

	
<mx:Script>
	<![CDATA[
	
	    import mx.automation.IAutomationManager;
	    import mx.automation.IAutomationObject;
	    import mx.automation.AutomationID;
		import mx.core.Application;
		
		private var SHOW:String = "Show";
		private var HIDE:String = "Hide";
		
		[Bindable] private var buttonText:String = SHOW;
		
		private function showAdobeRecording():void{
			bShowAdobeRecording.visible = false;
			bShowAdobeRecording.includeInLayout = false;
			bShowFunFXRecording.visible = true;
			bShowFunFXRecording.includeInLayout = true;
		}
		
		private function showFunFXRecording():void{
			bShowAdobeRecording.visible = true;
			bShowAdobeRecording.includeInLayout = true;
			bShowFunFXRecording.visible = false;
			bShowFunFXRecording.includeInLayout = false;
		}
		
		private function showRecording():void{
			this.x = Application.application.width - this.width;
			this.y = Application.application.height - this.height;
			toggleButtons(hideButton, showButton);
			
			bShowAdobeRecording.visible = true;
			bShowAdobeRecording.includeInLayout = true;
			bShowFunFXRecording.visible = false;
			bShowFunFXRecording.includeInLayout = false;
			outputAdobe.visible = false;
			outputFunFX.visible = true;
		}
		
		private function hideRecording():void{
			this.x = Application.application.width - this.width;
			this.y = Application.application.height - 50;
			toggleButtons(showButton, hideButton);
			
			bShowAdobeRecording.visible = false;
			bShowAdobeRecording.includeInLayout = false;
			bShowFunFXRecording.visible = false;
			bShowFunFXRecording.includeInLayout = false;
			outputAdobe.visible = false;
			outputFunFX.visible = false;
		}
		
		private function toggleButtons(show:LinkButton, hide:LinkButton):void{
			show.visible = true;
			show.includeInLayout = true;
			hide.visible = false;
			hide.includeInLayout = false;
		}
	
		private function startRecording():void
		{
			AQAdapter.aqAdapter.beginRecording();
			btnRecord.enabled = false;
			btnStop.enabled = true;
			btnReplay.enabled = false;
		}

		private function stopRecording():void
		{
			AQAdapter.aqAdapter.endRecording();
			outputAdobe.text = AQAdapter.aqAdapter.getRecords();
			outputFunFX.text = AQAdapter.aqAdapter.getFunFXRecords();
			invalidateSize();
			validateNow();
			btnRecord.enabled = true;
			btnReplay.enabled = true;
		}
		
		private var memoryTimer:Timer;
		private var currentStep:int;
		private function onMemoryTimer(e:TimerEvent):void
		{
			var records:XML = new XML(outputAdobe.text);
        	var step:XML = records.Step[currentStep];
        	if(step)
        	{
        	    var am:IAutomationManager = AQAdapter.aqAdapter.automationManager;
        	
				if (!am.isSynchronized(null))
					return ;

                var rid:AutomationID = AutomationID.parse(step.@id.toString());

	            var obj:IAutomationObject = am.resolveIDToSingleObject(rid);

		        if (!obj || !am.isSynchronized(obj))
					return ;

	            if (!am.isVisible(obj as DisplayObject))
					return ;
        	
	        	AQAdapter.aqAdapter.run(step.@id.toString(), 
		        						step.@method.toString(), 
		        						step.Args.@value.toString());
	        	++currentStep;
	        	memoryTimer.start();
	        }
	        else
	        {	
	        	memoryTimer.stop();
	        	btnReplay.enabled = true;
			    btnRecord.enabled = true;
     	        btnStop.enabled = true;
	        }
		}
		
		private function startReplay():void
		{
			memoryTimer = new Timer(500,1);
			memoryTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onMemoryTimer);
			memoryTimer.start();
			currentStep = 0;
			btnReplay.enabled = false;
			btnRecord.enabled = false;
			btnStop.enabled = false;
		}
		
		
		
	]]>
</mx:Script>
</mx:TitleWindow>
