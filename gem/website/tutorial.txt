h1. Tutorial

FunFX uses Ruby to talk to your Flex application. We have put a demo flex application up on "FunFX' website":http://funfx.rubyforge.org/DemoApp.html (TODO: actually put it up there).

We'll guide you through the steps required to run this.

h3. Create a Ruby file

Just use a text editor and create a file called myfunfx.rb. Depending on what kind of browser you're planning to use,
enter the following in the file:

*Watir*

<pre><code>require 'funfx/browser/watir'

browser = Watir::IE.new
</code></pre>

*SafariWatir*

<pre><code>require 'funfx/browser/safariwatir'

browser = Watir::Safari.new
</code></pre>

*FireWatir*

<pre><code>require 'funfx/browser/firewatir'

browser = FireWatir::Firefox.new
</code></pre>

Open a shell, and run your file:

<pre><code>ruby myfunfx.rb
</code></pre>

This should open a browser window. Now let's start talking to the Flex app...

h3. Getting a reference to a Flex application

In order to fire events and get values from Flex objects, you first have to tell the browser to
go to the page containing your Flex application, and then you must obtain a reference to the Flex 
application itself.

Add the following code to your Ruby file:

<pre><code>
browser.goto("http://funfx.rubyforge.org/DemoApp.html") # The URL containing your Flex app
flex = browser.flex_app('DemoAppId', 'DemoAppName') # See the API for FunFX::Browser::FlexAppLookup#flex_app for details
</code></pre>

h3. Looking up Flex elements with Automation IDs

Once you have a reference to the Flex app, FunFX lets you look up a Flex element using a Hash:

<pre><code>message = flex.text_area({:id => 'message'})
</code></pre>

or an Array of Hashes (each hash identifies an element in the tree of elements):

<pre><code>message = flex.text_area({:automationName => "Button Control Example"}, {:id => 'message'})
</code></pre>

There is a lookup method for each element type. See the FunFX API or class diagram for more details.

FunFX will translate the arguments you pass to the "Adobe Flex Automation ID format":http://livedocs.adobe.com/flex/3/langref/mx/automation/AutomationID.html.
For example, the last example would be translated to the following:

<pre><code>id{DemoApp string}|automationName{Button%20Control%20Example string}|id{message string}
</code></pre>

h3. When an automation object is not found

FunFX will raise an error if you try to interact with an automation object that cannot be found.

Note that FunFX will *not* raise any errors when you *look up* a Flex automation object that doesn't exist. It's only when you fire an event or ask for a property
that an error will be raised.

h2. Using FunFX with your own Flex app

TODO - explain how to build with automation and funfx swcs.
